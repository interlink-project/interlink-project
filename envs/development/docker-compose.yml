version: "3.3"
services:

  # Traefik Service
  proxy:
    container_name: ${PLATFORM_STACK_NAME}-traefik
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker=true
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Redirect Http to Https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
      # - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=apps@interlink-project.eu
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json

      # httpchallenge
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true

      # staging
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      
    labels:
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Content-Security-Policy=frame-ancestors 'self' ${DOMAIN} *.${MAIN_DOMAIN}
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.X-Frame-Options=ALLOW-FROM https://${MAIN_DOMAIN}
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Origin=*
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Methods=DELETE, POST, PUT, GET, OPTIONS
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Headers=Content-Type, Authorization, X-Requested-With
    networks:
      - traefik-public
      - default

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik-public
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.services.${PLATFORM_STACK_NAME}-portainer.loadbalancer.server.port=9000

  # Frontend Service
  frontend:
    image: "interlinkproject/frontend:latest"
    container_name: ${PLATFORM_STACK_NAME}-frontend
    environment:
      - REACT_APP_COMPLETE_DOMAIN=https://${DOMAIN}
      - DOMAIN=${DOMAIN}
      - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-frontend.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)
    networks:
      - traefik-public

  # Redis Service
  redis:
    container_name: ${PLATFORM_STACK_NAME}-redis
    image: redis:6-alpine
    networks:
      - default

  # Postgres Service
  db:
    container_name: ${PLATFORM_STACK_NAME}-db
    image: interlinkproject/postgres:latest
    volumes:
      - db-data:${PGDATA}
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    environment:
      - POSTGRES_MULTIPLE_DATABASES=loomio_production
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
  db2:
    # we do not want persistence for this databases YET (no volumes, whereas db has volumes)
    # TODO: delete this microservice and replace POSTGRES_SERVER=db2 by POSTGRES_SERVER=db (in this docker-compose catalogue and coproduction micros)
    container_name: ${PLATFORM_STACK_NAME}-db2
    image: interlinkproject/postgres:latest
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    environment:
      - POSTGRES_MULTIPLE_DATABASES=coproduction,catalogue
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  # PGAdmin (do not expose)
  pgadmin:
    container_name: ${PLATFORM_STACK_NAME}-pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5050:5050"
    depends_on:
      - db
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - default

  # MongoDB Service
  mongodb:
    image: bitnami/mongodb:latest
    container_name: ${PLATFORM_STACK_NAME}-mongodb
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      # start_period: 20s
    networks:
      - default

  # Coproduction Service
  coproduction:
    image: interlinkproject/backend-coproduction:latest
    container_name: ${PLATFORM_STACK_NAME}-coproduction
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/coproduction
      - POSTGRES_DB=coproduction
      - POSTGRES_SERVER=db2 # TODO: remove this
      - CATALOGUE_SERVICE_NAME=catalogue
      - CATALOGUE_PORT=80
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-coproduction.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.rule=Host(`${DOMAIN}`) && PathPrefix(`/coproduction`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.middlewares=coproduction-stripprefix
      - traefik.http.middlewares.coproduction-stripprefix.stripprefix.prefixes=/coproduction
    networks:
      - traefik-public
      - default

  # Coproduction Worker Service
  coproductionworker:
    image: interlinkproject/backend-coproduction:latest
    container_name: ${PLATFORM_STACK_NAME}-coproductionworker
    command: [ "bash", "./worker-start.sh" ]
    depends_on:
      - db
      - redis
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/coproduction
      - POSTGRES_DB=coproduction
      - POSTGRES_SERVER=db2 # TODO: remove this
    networks:
      - default

  # Catalogue Service
  catalogue:
    image: interlinkproject/backend-catalogue:latest
    container_name: ${PLATFORM_STACK_NAME}-catalogue
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/catalogue
      - POSTGRES_DB=catalogue
      - POSTGRES_SERVER=db2 # TODO: remove this
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-catalogue.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.rule=Host(`${DOMAIN}`) && PathPrefix(`/catalogue`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.middlewares=catalogue-stripprefix
      - traefik.http.middlewares.catalogue-stripprefix.stripprefix.prefixes=/catalogue
    networks:
      - traefik-public
      - default

  # Auth Service
  auth:
    image: interlinkproject/backend-auth:latest
    container_name: ${PLATFORM_STACK_NAME}-auth
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/auth
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=users
      - CLIENT_SECRET=${DEV_LOOMIO_AAC_APP_SECRET}
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-auth.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.rule=Host(`${DOMAIN}`) && PathPrefix(`/auth`)
    networks:
      - traefik-public
      - default

  # # Channels Service (Websocket)
  # channels:
  #   image: interlinkproject/backend-channels:latest
  #   container_name: ${PLATFORM_STACK_NAME}-channels
  #   environment:
  #     - SERVER_NAME=${DOMAIN}
  #     - SERVER_HOST=https://${DOMAIN}/channels
  #     - PORT=${PORT}
  #     - BASE_PATH=/channels
  #     - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
  #     - COLLECTION_NAME=channels_assets
  #   env_file:
  #     - ./.env.${ENVIRONMENT?Variable not set}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.http.services.${PLATFORM_STACK_NAME}-channels.loadbalancer.server.port=${PORT}
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.tls.certresolver=letsencrypt
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.tls=true
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.rule=Host(`${DOMAIN}`) && PathPrefix(`/channels`)
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.middlewares=channels-stripprefix
  #     - traefik.http.middlewares.channels-stripprefix.stripprefix.prefixes=/channels
  #   networks:
  #     - traefik-public
  #     - default

  # Googledrive Interlinker
  googledrive:
    image: interlinkproject/interlinker-googledrive:latest
    container_name: ${PLATFORM_STACK_NAME}-googledrive
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/googledrive
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=googledrive_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-googledrive.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.rule=Host(`${DOMAIN}`) && PathPrefix(`/googledrive`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.middlewares=googledrive-stripprefix
      - traefik.http.middlewares.googledrive-stripprefix.stripprefix.prefixes=/googledrive
    networks:
      - traefik-public
      - default

  # Survey Editor Interlinker
  surveyeditor:
    image: interlinkproject/interlinker-surveyeditor:latest
    container_name: ${PLATFORM_STACK_NAME}-surveyeditor
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/surveyeditor
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=surveyeditor_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-surveyeditor.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.rule=Host(`${DOMAIN}`) && PathPrefix(`/surveyeditor`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.middlewares=surveyeditor-stripprefix
      - traefik.http.middlewares.surveyeditor-stripprefix.stripprefix.prefixes=/surveyeditor
    networks:
      - traefik-public
      - default

  # Ceditor Interlinker Service
  ceditor:
    image: interlinkproject/interlinker-ceditor:ceditor-latest
    container_name: ${PLATFORM_STACK_NAME}-ceditor
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/ceditor
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=etherpad_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-ceditor.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.rule=Host(`${DOMAIN}`) && PathPrefix(`/ceditor`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.middlewares=ceditor-stripprefix
      - traefik.http.middlewares.ceditor-stripprefix.stripprefix.prefixes=/ceditor
    networks:
      - traefik-public
      - default

  # Ceditor Interlinker Service etherpad
  etherpad:
    image: interlinkproject/interlinker-ceditor:etherpad-latest
    container_name: ${PLATFORM_STACK_NAME}-etherpad
    environment:
      - TITLE=${ETHERPAD_TITLE}
      - PORT=${ETHERPAD_PORT}
      - ETHERPAD_API_KEY=${ETHERPAD_API_KEY}
      - DEFAULT_PAD_TEXT=${ETHERPAD_DEFAULT_PAD_TEXT}
      - ADMIN_PASSWORD=${ETHERPAD_ADMIN_PASSWORD}
      - ADMIN_USER=${ETHERPAD_ADMIN_USER}
      - REQUIRE_SESSION=${ETHERPAD_REQUIRE_SESSION}
      - EDIT_ONLY=${ETHERPAD_EDIT_ONLY}
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=etherpad_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-etherpad.loadbalancer.server.port=${ETHERPAD_PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.rule=Host(`${DOMAIN}`) && PathPrefix(`/etherpad`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.middlewares=etherpad-stripprefix
      - traefik.http.middlewares.etherpad-stripprefix.stripprefix.prefixes=/etherpad
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy

  externalresourcemanager:
    image: interlinkproject/interlinker-externalresourcemanager:latest
    container_name: ${PLATFORM_STACK_NAME}-externalresourcemanager
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/externalresourcemanager
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=externalresourcemanager_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-externalresourcemanager.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-externalresourcemanager.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-externalresourcemanager.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-externalresourcemanager.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-externalresourcemanager.rule=Host(`${DOMAIN}`) && PathPrefix(`/externalresourcemanager`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-externalresourcemanager.middlewares=externalresourcemanager-stripprefix
      - traefik.http.middlewares.externalresourcemanager-stripprefix.stripprefix.prefixes=/externalresourcemanager
    networks:
      - traefik-public
      - default

  loomio:
    image: interlinkproject/interlinker-loomio:latest
    container_name: ${PLATFORM_STACK_NAME}-loomio
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}/${LOOMIO_POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - AAC_APP_SECRET=${DEV_LOOMIO_AAC_APP_SECRET}
      - SECRET_COOKIE_TOKEN=${DEV_LOOMIO_SECRET_COOKIE_TOKEN}
      - SECRET_KEY_BASE=${DEV_LOOMIO_SECRET_COOKIE_TOKEN}
      - DEVISE_SECRET=${DEV_LOOMIO_DEVISE_SECRET}
      - SMTP_USERNAME=${DEV_LOOMIO_SMTP_USERNAME}
      - SMTP_PASSWORD=${DEV_LOOMIO_SMTP_PASSWORD}

    volumes:
      - loomio-uploads:/loomio/public/system
      - loomio-storage:/loomio/storage
      - loomio-files:/loomio/public/files
      - loomio-plugins:/loomio/plugins/docker
      - loomio-import:/import
      - loomio-tmp:/loomio/tmp
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    depends_on:
      - db
      - redis
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-loomio.loadbalancer.server.port=${PORT}
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Content-Security-Policy=frame-ancestors 'self' ${DOMAIN} *.${MAIN_DOMAIN}
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.X-Frame-Options=ALLOW-FROM https://${MAIN_DOMAIN}
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Origin=*
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Methods=GET, POST, PUT, DELETE, OPTIONS
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Headers=Content-Type, Authorization, X-Requested-With
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.middlewares=iframeHeaders
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.rule=Host(`loomio.${DOMAIN}`)
    networks:
      - traefik-public
      - default

  loomioworker:
    image: interlinkproject/interlinker-loomio:latest
    container_name: ${PLATFORM_STACK_NAME}-loomioworker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}/${LOOMIO_POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - TASK=worker
      - AAC_APP_SECRET=${DEV_LOOMIO_AAC_APP_SECRET}
      - SECRET_COOKIE_TOKEN=${DEV_LOOMIO_SECRET_COOKIE_TOKEN}
      - SECRET_KEY_BASE=${DEV_LOOMIO_SECRET_COOKIE_TOKEN}
      - DEVISE_SECRET=${DEV_LOOMIO_DEVISE_SECRET}
      - SMTP_USERNAME=${DEV_LOOMIO_SMTP_USERNAME}
      - SMTP_PASSWORD=${DEV_LOOMIO_SMTP_PASSWORD}
    volumes:
      - loomio-uploads:/loomio/public/system
      - loomio-storage:/loomio/storage
      - loomio-files:/loomio/public/files
      - loomio-plugins:/loomio/plugins/docker
      - loomio-tmp:/loomio/tmp
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - traefik-public
      - default

  loomiochannels:
    image: loomio/loomio_channel_server:latest
    container_name: ${PLATFORM_STACK_NAME}-loomiochannels
    environment:
      - REDIS_URL=redis://redis:6379
      - VIRTUAL_HOST=channels.loomio.${DOMAIN}
      - SITE_NAME=channels.loomio.${DOMAIN}
      - LETSENCRYPT_HOST=channels.loomio.${DOMAIN}
      - LETSENCRYPT_EMAIL=apps@interlink-project.eu
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-loomiochannels.loadbalancer.server.port=5000
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.rule=Host(`channels.loomio.${DOMAIN}`)
    networks:
      - traefik-public
      - default

  # service augmenter

  elasticsearch:
    image: elasticsearch:1.7.6-alpine
    container_name: ${PLATFORM_STACK_NAME}-elasticsearch
    environment:
      - node.name=elasticsearch
      - xpack.security.enabled=false
      - discovery.type=single-node
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - discovery.zen.ping.unicast.hosts=127.0.0.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - elasticsearch-config:/usr/share/elasticsearch/config
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - default

  augmenterservice:
    image: interlinkproject/publicservice-servicepedia:augmenterservice-latest
    container_name: ${PLATFORM_STACK_NAME}-augmenterservice
    restart: always
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - traefik-public
      - default
    environment:
      # TODO: verify secrets
      - VIRTUAL_HOST=servicepedia.${DOMAIN}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SURVEYINTERLINK_URL=https://${DOMAIN}/surveyeditor
      - AUTHINTERLINK_URL=https://${DOMAIN}/auth
      - SURVEYAPI_VERSION=v1
      - HOST=0.0.0.0
      - PORT=${PORT}
      - PROTOCOL=https://
      - BASE_PATH=
      - SCRIPT_NAME=
      - DEBUG=True
      - ELASTICSEARCH_INDEX=annotator
      - AUTH_ON=False
      - AUTHZ_ON=False
      - MAIL_SERVER=mail.interlink-project.eu
      - MAIL_PORT=25
      - MAIL_DEFAULT_SENDER=no-reply@interlink-project.eu
      - MAIL_USE_TLS=False
      - MAIL_USE_SSL=False
      - MAIL_MAX_EMAILS=None
      - MAIL_ASCII_ATTACHMENTS=False
      - MAX_CONTENT_LENGTH=3145728
      - UPLOAD_EXTENSIONS=[".pdf",".docx"]
      - UPLOAD_PATH=uploads
      - USE_SESSION_FOR_NEXT=True
      - SWAGGER_URL=/docs
      - API_URL=app/static/swagger.yaml
      - BABEL_DEFAULT_LOCALE=en
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${DEV_LOOMIO_AAC_APP_SECRET}
      - ISSUER=${AAC_HOST}
      - AUTH_URI=https://aac.platform.smartcommunitylab.it/oauth/authorize
      - TOKEN_URI=https://aac.platform.smartcommunitylab.it/oauth/token
      - TOKEN_INTROSPECTION_URI=https://aac.platform.smartcommunitylab.it/oauth/introspect
      - REDIRECT_URI=https://${DOMAIN}/oidc_callback
      - USERINFO_URI=https://aac.platform.smartcommunitylab.it/userinfo
      - END_SESSION_ENDPOINT=https://aac.platform.smartcommunitylab.it/endsession
      - CONSUMER_KEY="6E1C924B-C03B-4F7F-97DE-B72EE2338B39"
      - CONSUMER_TTL=86400
      - CRYPT_KEY="qF_uizNn_HP4HaT_jsYemyK-qDHBuJUGA1C5MZl8xAg="
    depends_on:
      - elasticsearch
      - auth
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.tls=true
      - traefik.http.services.${PLATFORM_STACK_NAME}-augmenterservice.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.rule=Host(`servicepedia.${DOMAIN}`)
    command: gunicorn  --log-level debug --bind 0.0.0.0:80 --workers 1 "app.main:create_app()"

networks:
  traefik-public:
    external: true
  default:
    name: ${PLATFORM_STACK_NAME}-default

volumes:
  loomio-uploads:
  loomio-storage:
  loomio-files:
  loomio-plugins:
  loomio-import:
  loomio-tmp:

  db-data:
  elasticsearch-data:
  elasticsearch-config:
