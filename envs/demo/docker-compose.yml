version: "3.9"
services:

  # Traefik Service
  proxy:
    image: traefik:v2.6.6
    container_name: ${PLATFORM_STACK_NAME}-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker=true
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Redirect Http to Https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
      # - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=apps@interlink-project.eu
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json

      # httpchallenge
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true

      # staging
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

    labels:
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Content-Security-Policy=frame-ancestors 'self' ${DOMAIN} *.${MAIN_DOMAIN}
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.X-Frame-Options=ALLOW-FROM https://${MAIN_DOMAIN}
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Origin=*
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Methods=DELETE, POST, PUT, GET, OPTIONS
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Headers=Content-Type, Authorization, X-Requested-With
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  portainer:
    image: portainer/portainer-ce:2.11.1-alpine
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik-public
    environment:
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.services.${PLATFORM_STACK_NAME}-portainer.loadbalancer.server.port=9000
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Frontend Service
  frontend:
    image: interlinkproject/frontend:${FRONTEND_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-frontend
    volumes:
      - ${FRONTEND_CUSTOMIZATION_PATH}:/usr/share/nginx/html/static/customization
    environment:
      - DOMAIN
      - NODE_ENV=production
      - REACT_APP_DOMAIN=${DOMAIN}
      - REACT_APP_PROTOCOL=https://
      - REACT_APP_DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE}
      - REACT_APP_ALLOWED_LANGUAGES=${ALLOWED_LANGUAGES}
      - TZ=${TZ}
      - REACT_APP_MATOMO_ID=1
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-frontend.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  frontend-docs:
    image: interlinkproject/frontend-docs:${FRONTEND_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-frontend-docs
    networks:
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-frontend-docs.loadbalancer.server.port=80
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend-docs.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend-docs.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend-docs.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend-docs.rule=Host(`${DOMAIN}`) && PathPrefix(`/docs`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-frontend-docs.middlewares=frontend-docs-stripprefix
      - traefik.http.middlewares.frontend-docs-stripprefix.stripprefix.prefixes=/docs
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mariadb:
    image: mariadb
    command: --max-allowed-packet=64MB
    restart: always
    volumes:
      - mariadb-data:/var/lib/mysql
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - default
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  matomo:
    image: bitnami/matomo:4.10.1
    restart: always
    volumes:
      - matomo-data:/bitnami/matomo
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - default
      - traefik-public
    depends_on:
      - mariadb
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-matomo.loadbalancer.server.port=8080
      - traefik.http.routers.${PLATFORM_STACK_NAME}-matomo.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-matomo.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-matomo.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-matomo.rule=Host(`${DOMAIN}`) && PathPrefix(`/matomo/`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-matomo.middlewares=matomo-stripprefix
      - traefik.http.middlewares.matomo-stripprefix.stripprefix.prefixes=/matomo/
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Redis Service
  redis:
    image: redis:6-alpine
    container_name: ${PLATFORM_STACK_NAME}-redis
    networks:
      - default
      - grafana-network
    environment:
      - TZ=${TZ}
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # dremio:
  #   container_name: dremio
  #   restart: always
  #   image: dremio/dremio-oss:21.2
  #   volumes:
  #     - dremio-data:/opt/dremio/data
  #   networks:
  #     - traefik-public
  #   ports:
  #     - "9047:9047"   # UI (HTTP)
  #     # - "31010:31010" # ODBC/JDBC clients
  #     # - "2181:2181"   # ZooKeeper
  #     # - "45678:45678" # Inter-node communication
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.http.services.${PLATFORM_STACK_NAME}-dremio.loadbalancer.server.port=9047
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-dremio.entrypoints=websecure
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-dremio.tls.certresolver=letsencrypt
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-dremio.tls=true
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-dremio.rule=Host(`${DOMAIN}`) && PathPrefix(`/dremio`)
  #   logging:
  #     driver: "json-file"
  #     options:
  #       tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        
  # Postgres Service
  db:
    image: interlinkproject/postgres:${DB_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-db
    volumes:
      - db-data:${PGDATA}
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    environment:
      - POSTGRES_MULTIPLE_DATABASES=loomio_production,coproduction_production,catalogue_production
      - PGUSER=${POSTGRES_USER} # https://stackoverflow.com/questions/60193781/postgres-with-docker-compose-gives-fatal-role-root-does-not-exist-error
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # PGAdmin (do not expose)
  pgadmin:
    image: dpage/pgadmin4:6.8
    container_name: ${PLATFORM_STACK_NAME}-pgadmin
    ports:
      - "5050:5050"
    depends_on:
      - db
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # MongoDB Service
  mongodb:
    image: bitnami/mongodb:latest
    container_name: ${PLATFORM_STACK_NAME}-mongodb
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      # start_period: 20s
    networks:
      - default
      - grafana-network
    volumes:
      - mongodb-data:/bitnami/mongodb
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Coproduction Service
  coproduction:
    image: interlinkproject/backend-coproduction:${COPRODUCTION_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-coproduction
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    volumes:
      - coproduction-static:/app/static
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/coproduction
      - POSTGRES_DB=coproduction_production
      - POSTGRES_SERVER=db
      - CATALOGUE_SERVICE_NAME=catalogue
      - CATALOGUE_PORT=80
      - DEFAULT_LANGUAGE
      - ALLOWED_LANGUAGES
    command: ["bash", "./start-prod.sh"]
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-coproduction.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.rule=Host(`${DOMAIN}`) && PathPrefix(`/coproduction`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-coproduction.middlewares=coproduction-stripprefix
      - traefik.http.middlewares.coproduction-stripprefix.stripprefix.prefixes=/coproduction
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Coproduction Worker Service
  coproductionworker:
    image: interlinkproject/backend-coproduction:${COPRODUCTION_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-coproductionworker
    command: [ "bash", "./worker-start.sh" ]
    volumes:
      - coproduction-static:/app/static
    depends_on:
      - db
      - redis
      - coproduction
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/coproduction
      - POSTGRES_DB=coproduction_production
      - CATALOGUE_SERVICE_NAME=catalogue
      - CATALOGUE_PORT=80
      - DEFAULT_LANGUAGE
      - ALLOWED_LANGUAGES
      - POSTGRES_SERVER=db
    networks:
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Catalogue Service
  catalogue:
    image: interlinkproject/backend-catalogue:${CATALOGUE_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-catalogue
    volumes:
      - catalogue-static:/app/static
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/catalogue
      - POSTGRES_DB=catalogue_production
      - POSTGRES_SERVER=db
      - DEFAULT_LANGUAGE
      - ALLOWED_LANGUAGES
    depends_on:
      - db
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-catalogue.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.rule=Host(`${DOMAIN}`) && PathPrefix(`/catalogue`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-catalogue.middlewares=catalogue-stripprefix
      - traefik.http.middlewares.catalogue-stripprefix.stripprefix.prefixes=/catalogue
    command: ["bash", "./start-prod.sh"]
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Auth Service
  auth:
    image: interlinkproject/backend-auth:${AUTH_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-auth
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/auth
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=users
      - CLIENT_SECRET=${LOOMIO_AAC_APP_SECRET}
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    volumes:
      - auth-static:/app/static
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-auth.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-auth.rule=Host(`${DOMAIN}`) && PathPrefix(`/auth`)
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # # Channels Service (Websocket)
  # channels:
  #   image: interlinkproject/backend-channels:${CHANNELS_VERSION}
  #   container_name: ${PLATFORM_STACK_NAME}-channels
  #   environment:
  #     - SERVER_NAME=${DOMAIN}
  #     - SERVER_HOST=https://${DOMAIN}/channels
  #     - PORT=${PORT}
  #     - BASE_PATH=/channels
  #     - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
  #     - COLLECTION_NAME=channels_assets
  #   env_file:
  #     - ./.env.${ENVIRONMENT?Variable not set}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.http.services.${PLATFORM_STACK_NAME}-channels.loadbalancer.server.port=${PORT}
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.tls.certresolver=letsencrypt
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.tls=true
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.rule=Host(`${DOMAIN}`) && PathPrefix(`/channels`)
  #     - traefik.http.routers.${PLATFORM_STACK_NAME}-channels.middlewares=channels-stripprefix
  #     - traefik.http.middlewares.channels-stripprefix.stripprefix.prefixes=/channels
  #   networks:
  #     - traefik-public
  #     - default

  # Googledrive Interlinker
  googledrive:
    image: interlinkproject/interlinker-googledrive:${GOOGLEDRIVE_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-googledrive
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/googledrive
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=googledrive_assets
      - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
      - GOOGLE_PRIVATE_KEY_ID=${GOOGLE_PRIVATE_KEY_ID}
      - GOOGLE_PRIVATE_KEY=${GOOGLE_PRIVATE_KEY}
      - GOOGLE_CLIENT_EMAIL=${GOOGLE_CLIENT_EMAIL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-googledrive.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.rule=Host(`${DOMAIN}`) && PathPrefix(`/googledrive`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-googledrive.middlewares=googledrive-stripprefix
      - traefik.http.middlewares.googledrive-stripprefix.stripprefix.prefixes=/googledrive
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Survey Editor Interlinker
  surveyeditor:
    image: interlinkproject/interlinker-surveyeditor:${SURVEYEDITOR_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-surveyeditor
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/surveyeditor
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=surveyeditor_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-surveyeditor.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.rule=Host(`${DOMAIN}`) && PathPrefix(`/surveyeditor`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-surveyeditor.middlewares=surveyeditor-stripprefix
      - traefik.http.middlewares.surveyeditor-stripprefix.stripprefix.prefixes=/surveyeditor
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Ceditor Interlinker Service
  ceditor:
    image: interlinkproject/interlinker-ceditor:ceditor.${CEDITOR_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-ceditor
    environment:
      - SERVER_NAME=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/ceditor
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=etherpad_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-ceditor.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.rule=Host(`${DOMAIN}`) && PathPrefix(`/ceditor`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-ceditor.middlewares=ceditor-stripprefix
      - traefik.http.middlewares.ceditor-stripprefix.stripprefix.prefixes=/ceditor
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Ceditor Interlinker Service etherpad
  etherpad:
    image: interlinkproject/interlinker-ceditor:etherpad.${ETHERPAD_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-etherpad

    restart: on-failure
    environment:
      - TITLE=${ETHERPAD_TITLE}
      - PORT=${ETHERPAD_PORT}
      - ETHERPAD_API_KEY=${ETHERPAD_API_KEY}
      - DEFAULT_PAD_TEXT=${ETHERPAD_DEFAULT_PAD_TEXT}
      - ADMIN_PASSWORD=${ETHERPAD_ADMIN_PASSWORD}
      - ADMIN_USER=${ETHERPAD_ADMIN_USER}
      - REQUIRE_SESSION=${ETHERPAD_REQUIRE_SESSION}
      - EDIT_ONLY=${ETHERPAD_EDIT_ONLY}
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=etherpad_assets
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-etherpad.loadbalancer.server.port=${ETHERPAD_PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.rule=Host(`${DOMAIN}`) && PathPrefix(`/etherpad`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-etherpad.middlewares=etherpad-stripprefix
      - traefik.http.middlewares.etherpad-stripprefix.stripprefix.prefixes=/etherpad
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  loomio:
    image: interlinkproject/interlinker-loomio:${LOOMIO_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-loomio

    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}/${LOOMIO_POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - AAC_APP_SECRET=${LOOMIO_AAC_APP_SECRET}
      - SECRET_COOKIE_TOKEN=${LOOMIO_SECRET_COOKIE_TOKEN}
      - SECRET_KEY_BASE=${LOOMIO_SECRET_COOKIE_TOKEN}
      - DEVISE_SECRET=${LOOMIO_DEVISE_SECRET}
      - SMTP_USERNAME=${LOOMIO_SMTP_USERNAME}
      - SMTP_PASSWORD=${LOOMIO_SMTP_PASSWORD}

    volumes:
      - loomio-uploads:/loomio/public/system
      - loomio-storage:/loomio/storage
      - loomio-files:/loomio/public/files
      - loomio-plugins:/loomio/plugins/docker
      - loomio-import:/import
      - loomio-tmp:/loomio/tmp
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    depends_on:
      - db
      - redis
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-loomio.loadbalancer.server.port=${PORT}
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Content-Security-Policy=frame-ancestors 'self' ${DOMAIN} *.${MAIN_DOMAIN}
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.X-Frame-Options=ALLOW-FROM https://${MAIN_DOMAIN}
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Origin=*
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Methods=GET, POST, PUT, DELETE, OPTIONS
      - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Headers=Content-Type, Authorization, X-Requested-With
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.middlewares=iframeHeaders
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomio.rule=Host(`loomio.${DOMAIN}`)
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  loomioworker:
    image: interlinkproject/interlinker-loomio:${LOOMIOWORKER_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-loomioworker

    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}/${LOOMIO_POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - TASK=worker
      - AAC_APP_SECRET=${LOOMIO_AAC_APP_SECRET}
      - SECRET_COOKIE_TOKEN=${LOOMIO_SECRET_COOKIE_TOKEN}
      - SECRET_KEY_BASE=${LOOMIO_SECRET_COOKIE_TOKEN}
      - DEVISE_SECRET=${LOOMIO_DEVISE_SECRET}
      - SMTP_USERNAME=${LOOMIO_SMTP_USERNAME}
      - SMTP_PASSWORD=${LOOMIO_SMTP_PASSWORD}
    volumes:
      - loomio-uploads:/loomio/public/system
      - loomio-storage:/loomio/storage
      - loomio-files:/loomio/public/files
      - loomio-plugins:/loomio/plugins/docker
      - loomio-tmp:/loomio/tmp
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  loomiochannels:
    image: loomio/loomio_channel_server:latest
    container_name: ${PLATFORM_STACK_NAME}-loomiochannels

    environment:
      - REDIS_URL=redis://redis:6379
      - VIRTUAL_HOST=channels.loomio.${DOMAIN}
      - SITE_NAME=channels.loomio.${DOMAIN}
      - LETSENCRYPT_HOST=channels.loomio.${DOMAIN}
      - LETSENCRYPT_EMAIL=apps@interlink-project.eu
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-loomiochannels.loadbalancer.server.port=5000
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-loomiochannels.rule=Host(`channels.loomio.${DOMAIN}`)
    networks:
      - traefik-public
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # service augmenter

  augmenterservice:
    image: interlinkproject/publicservice-servicepedia:augmenterservice.${AUGMENTERSERVICE_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-augmenterservice

    restart: always
    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    networks:
      - traefik-public
      - default
    environment:
      # TODO: verify secrets
      - VIRTUAL_HOST=servicepedia.${DOMAIN}
      - ELASTICSEARCH_URL=http://newelasticsearch:9200
      - SURVEYINTERLINK_URL=https://${DOMAIN}/surveyeditor
      - AUTHINTERLINK_URL=https://${DOMAIN}/auth
      - SURVEYAPI_VERSION=v1
      - HOST=0.0.0.0
      - PORT=${PORT}
      - PROTOCOL=https://
      - BASE_PATH=
      - SCRIPT_NAME=
      - DEBUG=True
      - ELASTICSEARCH_INDEX=annotator
      - AUTH_ON=False
      - AUTHZ_ON=False
      - MAIL_SERVER=mail.interlink-project.eu
      - MAIL_PORT=25
      - MAIL_DEFAULT_SENDER=no-reply@interlink-project.eu
      - MAIL_USE_TLS=False
      - MAIL_USE_SSL=False
      - MAIL_MAX_EMAILS=None
      - MAIL_ASCII_ATTACHMENTS=False
      - MAX_CONTENT_LENGTH=3145728
      - UPLOAD_EXTENSIONS=[".pdf",".docx"]
      - UPLOAD_PATH=uploads
      - USE_SESSION_FOR_NEXT=True
      - SWAGGER_URL=/docs
      - API_URL=app/static/swagger.yaml
      - BABEL_DEFAULT_LOCALE=en
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${LOOMIO_AAC_APP_SECRET}
      - ISSUER=${AAC_HOST}
      - AUTH_URI=https://aac.platform.smartcommunitylab.it/oauth/authorize
      - TOKEN_URI=https://aac.platform.smartcommunitylab.it/oauth/token
      - TOKEN_INTROSPECTION_URI=https://aac.platform.smartcommunitylab.it/oauth/introspect
      - REDIRECT_URI=https://${DOMAIN}/callback
      - USERINFO_URI=https://aac.platform.smartcommunitylab.it/userinfo
      - END_SESSION_ENDPOINT=https://aac.platform.smartcommunitylab.it/endsession
      - CONSUMER_KEY="6E1C924B-C03B-4F7F-97DE-B72EE2338B39"
      - CONSUMER_TTL=86400
      - CRYPT_KEY="qF_uizNn_HP4HaT_jsYemyK-qDHBuJUGA1C5MZl8xAg="
    depends_on:
      - newelasticsearch
      - auth
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.tls=true
      - traefik.http.services.${PLATFORM_STACK_NAME}-augmenterservice.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-augmenterservice.rule=Host(`servicepedia.${DOMAIN}`)
    command: gunicorn  --log-level debug --bind 0.0.0.0:80 --workers 1  --threads 100 "app.main:create_app()"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  logging:
    image: interlinkproject/backend-logging:${LOGGING_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-logging

    environment:
      - ELASTIC_HOST
      - ELASTIC_PORT
      - ELASTIC_USERNAME
      - ELASTIC_PASSWORD
      - DOMAIN=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/logging
      - TZ=${TZ}
      - WAITFORIT_TIMEOUT=120
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-logging.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.rule=Host(`${DOMAIN}`) && PathPrefix(`/logging`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.middlewares=logging-stripprefix
      - traefik.http.middlewares.logging-stripprefix.stripprefix.prefixes=/logging
    restart: on-failure
    networks:
      - traefik-public
      - default
    command: "wait-for-it --service ${ELASTIC_HOST}:${ELASTIC_PORT} -- uvicorn main:app --reload --host 0.0.0.0 --port ${PORT}"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  newelasticsearch:
    image: elasticsearch:8.2.2
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
      - ELASTIC_USERNAME
      - ELASTIC_PASSWORD
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik-public
    volumes:
      - newelasticsearch-data:/usr/share/elasticsearch/data
      - newelasticsearch-config:/usr/share/elasticsearch/config
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    image: interlinkproject/backend-monitoring:grafana.${GRAFANA_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
      - loki:loki
    volumes:
      - grafana-dashboards:/var/lib/grafana
      - grafana-data:/etc/grafana/
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.rule=Host(`${DOMAIN}`) && PathPrefix(`/monitoring`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.service=${PLATFORM_STACK_NAME}-grafana
      - traefik.http.services.${PLATFORM_STACK_NAME}-grafana.loadbalancer.server.port=3000
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.middlewares=${PLATFORM_STACK_NAME}-grafana-stripprefix
      - traefik.http.middlewares.${PLATFORM_STACK_NAME}-grafana-stripprefix.stripprefix.prefixes=/monitoring
    networks:
      - traefik-public
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  prometheus:
    image: interlinkproject/backend-monitoring:grafana.${PROMETHEUS_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-prometheus
    restart: unless-stopped
    volumes:
      - prometheus-data:/prometheus
    expose:
      - 9090
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  cadvisor:
    image: google/cadvisor:v0.33.0
    container_name: ${PLATFORM_STACK_NAME}-monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    expose:
      - 8080
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: ${PLATFORM_STACK_NAME}-monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  loki:
    image: interlinkproject/backend-monitoring:loki.${LOKI_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-loki

    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  promtail:
    image: interlinkproject/backend-monitoring:promtail.${PROMTAIL_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-promtail

    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    links:
      - loki:loki
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  filebeat:
    image: interlinkproject/backend-monitoring:filebeat.${FILEBEAT_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-filebeat
    user: root
    volumes:
      - type: bind
        source: /datadrive/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    links:
      - newelasticsearch:newelasticsearch
    networks:
      - grafana-network
      - traefik-public

#  alertmanager:
#    image: interlinkproject/backend-monitoring:alertmanager.${ALERTMANAGER_VERSION}
#    container_name: ${PLATFORM_STACK_NAME}-alertmanager
#    restart: unless-stopped
#    ports:
#      - "9093:9093"
#    command:
#      - '-config.file=/etc/alertmanager/config.yml'
#      - '-storage.path=/alertmanager'
#    networks:
#      - grafana-network
#    logging:
#      driver: "json-file"
#      options:
#        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


networks:
  traefik-public:
    external: true
  default:
    name: ${PLATFORM_STACK_NAME}-default
  grafana-network:
    external: true

volumes:
  loomio-uploads:
  loomio-storage:
  loomio-files:
  loomio-plugins:
  loomio-import:
  loomio-tmp:

  db-data:
  dremio-data:
  portainer-data:
  mongodb-data:
  elasticsearch-config:
  newelasticsearch-data:
  newelasticsearch-config:
  auth-static:
  coproduction-static:
  catalogue-static:
  matomo-data:
  mariadb-data:
  
  grafana-dashboards:
  grafana-data:
  prometheus-data:
  loki-data:
  filebeat:
#  alertmanager-data:
