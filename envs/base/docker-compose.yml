version: "3.3"
services:
  proxy:
    container_name: traefik
    image: traefik:v2.2
    ports:
      - "80:80"
      - "8090:8080"
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker=true
      - --tracing=true
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true

  frontend:
    image: "interlinkproject/frontend"
    container_name: frontend
    env_file:
      - .env
    environment:
      - REACT_APP_BASE_URI=http://localhost
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=${PORT}
    networks:
      - traefik-public

  redis:
    container_name: redis
    image: redis:6-alpine
    networks:
      - default

  db:
    container_name: db
    image: interlinkproject/postgres
    #volumes:
    #  - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true
    networks:
      - default

  coproduction:
    image: interlinkproject/backend-coproduction:latest
    container_name: coproduction-prod
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - PORT=${PORT}
      # behind proxy
      - BASE_PATH=/coproduction
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-coproduction-http.rule=PathPrefix(`/coproduction`)
      - traefik.http.services.${STACK_NAME?Variable not set}-coproduction.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${STACK_NAME?Variable not set}-coproduction-http.middlewares=coproduction-stripprefix
      - traefik.http.middlewares.coproduction-stripprefix.stripprefix.prefixes=/coproduction
    networks:
      - traefik-public
      - default

  coproductionworker:
    image: interlinkproject/backend-coproduction:latest
    container_name: coproductionworker-prod
    command: ["bash", "./worker-start.sh"]
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # behind proxy
      - BASE_PATH=/coproduction
    networks:
      - default

  catalogue:
    image: "interlinkproject/backend-catalogue"
    container_name: catalogue-integrated
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=http://${DOMAIN?Variable not set}/catalogue
      - PORT=${PORT}
      # behind proxy
      - BASE_PATH=/catalogue
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-catalogue-http.rule=PathPrefix(`/catalogue`)
      - traefik.http.services.${STACK_NAME?Variable not set}-catalogue.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${STACK_NAME?Variable not set}-catalogue-http.middlewares=catalogue-stripprefix
      - traefik.http.middlewares.catalogue-stripprefix.stripprefix.prefixes=/catalogue
    networks:
      - traefik-public
      - default

networks:
  traefik-public:
    external: true
