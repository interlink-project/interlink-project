# Translation files manipulation

## Frontend repository

No problem. The changes to the files are propagated to weblate.

## Interlinkers-data repository

First of all, there are two sets of files:

* Object files: the files that represent the different objects, interlinkers, schemas and problemprofiles. As you can see in them, there are keys such as "name_translations" with a dictionary that contains the translations. Instead, these translations are not supposed to be changed here, but in the translation files.
* Translations files: files that are updated when an object is changed / added / removed. For example, if I add a new interlinker, these files are completely erased and generated again.

The workflow acts differently depending on the contribution type:

* Push workflow: for example, someone adds a new schema or changes the phasesÂ of an existing one. The workflow generates new translation files based on the current status of the schemas, interlinkers and problemprofiles. So the translation files that Alessandro was modifying are considered OLD, because there is a need to reflect the changes on the objects (even if there are not).

* Pull request workflow: here, the workflow prevails the changes in the translation files, so the content is analyzed and the object files are updated with the content here. In fact, weblate makes pushes to a branch called "weblate", and when someone creates a pull request (usually me) this process is executed and then merged with the master branch. This merge (push) to the master branch triggers the "push workflow", generating new translation files after updating the object files with the translation files generated by weblate.

There are two possible workarounds for integrating translation files manually: 

* Locally execute "python3 input.py" and commit all the changes generated to master.
* Push the changes (only the translation files) to the "weblate" branch and open a pull request, wait for the workflow to finish and delete the branch.
